C's volatile keyword is a qualifier that is applied to a variable when it is declared. It tells the compiler that the value of the variable
may change at any time--without any action being taken by the code the compiler finds nearby. 
The implications of this are quite serious. However, before we examine them, let's take a look at the syntax.

Syntax of C's volatile Keyword
To declare a variable volatile, include the keyword volatile before or after the data type in the variable definition.
For instance both of these declarations will declare an unsigned 16-bit integer variable to be a volatile integer:

volatile uint16_t x; 
uint16_t volatile y;

Now, it turns out that pointers to volatile variables are very common, especially with memory-mapped I/O registers. 
Both of these declarations declare p_reg to be a pointer to a volatile unsigned 8-bit integer:

volatile uint8_t * p_reg; 
uint8_t volatile * p_reg;

Volatile pointers to non-volatile data are very rare (I think I've used them once), but I'd better go ahead and give you the syntax:

uint16_t * volatile p_x;
And just for completeness, if you really must have a volatile pointer to a volatile variable, you'd write:

uint16_t volatile * volatile p_y;
Incidentally, for a great explanation of why you have a choice of where to place volatile and why you should place it after
the data type (for example, int volatile * foo), 
read Dan Sak's column "Top-Level cv-Qualifiers in Function Parameters" (Embedded Systems Programming, February 2000, p. 63).

Finally, if you apply volatile to a struct or union, the entire contents of the struct or union are volatile.
If you don't want this behavior, you can apply the volatile qualifier to the individual members of the struct or union.
